{
    "benchmarks.BasicBenchmark.time_solve_model": {
        "code": "class BasicBenchmark:\n    def time_solve_model(self):\n        self.sim.solve([0, 1800])\n\n    def setup(self):\n        self.sim = lp.basic_simulation()",
        "min_run_count": 2,
        "name": "benchmarks.BasicBenchmark.time_solve_model",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "21dc88971553291c844a81300eeac2ae53f86ef7781bdb26086d1d57d88c8cec",
        "warmup_time": -1
    },
    "benchmarks.LargePack.time_discharge_1cpu": {
        "code": "class LargePack:\n    def time_discharge_1cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.experiment,\n            initial_soc=0.5,\n            nproc=1,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=64, Ns=10, Rb=1e-4, Rc=1e-2)\n        chemistry = pybamm.parameter_sets.Chen2020\n        self.parameter_values = pybamm.ParameterValues(chemistry=chemistry)\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 64 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )\n        I_app = 64\n        self.long_experiment = pybamm.Experiment(\n            [\n                f\"Charge at {I_app} A for 20 minutes\",\n                \"Rest for 15 minutes\",\n                f\"Discharge at {I_app} A for 20 minutes\",\n                \"Rest for 30 minutes\",\n            ]\n            * 3,\n            period=\"10 seconds\",\n        )",
        "min_run_count": 2,
        "name": "benchmarks.LargePack.time_discharge_1cpu",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 600,
        "type": "time",
        "unit": "seconds",
        "version": "5a2756f3bebd1d0e37e074eb74a0bca10c9ce960ed21316ad26e9583a10353f8",
        "warmup_time": -1
    },
    "benchmarks.LargePack.time_discharge_2cpu": {
        "code": "class LargePack:\n    def time_discharge_2cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.experiment,\n            initial_soc=0.5,\n            nproc=2,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=64, Ns=10, Rb=1e-4, Rc=1e-2)\n        chemistry = pybamm.parameter_sets.Chen2020\n        self.parameter_values = pybamm.ParameterValues(chemistry=chemistry)\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 64 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )\n        I_app = 64\n        self.long_experiment = pybamm.Experiment(\n            [\n                f\"Charge at {I_app} A for 20 minutes\",\n                \"Rest for 15 minutes\",\n                f\"Discharge at {I_app} A for 20 minutes\",\n                \"Rest for 30 minutes\",\n            ]\n            * 3,\n            period=\"10 seconds\",\n        )",
        "min_run_count": 2,
        "name": "benchmarks.LargePack.time_discharge_2cpu",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 600,
        "type": "time",
        "unit": "seconds",
        "version": "f19047f1071beb2e16eb288e9a2cb14f4b91fca1dd10a3dbe5c68078a908886d",
        "warmup_time": -1
    },
    "benchmarks.LargePack.time_long_cycle_2cpu": {
        "code": "class LargePack:\n    def time_long_cycle_2cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.long_experiment,\n            initial_soc=0.5,\n            nproc=2,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=64, Ns=10, Rb=1e-4, Rc=1e-2)\n        chemistry = pybamm.parameter_sets.Chen2020\n        self.parameter_values = pybamm.ParameterValues(chemistry=chemistry)\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 64 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )\n        I_app = 64\n        self.long_experiment = pybamm.Experiment(\n            [\n                f\"Charge at {I_app} A for 20 minutes\",\n                \"Rest for 15 minutes\",\n                f\"Discharge at {I_app} A for 20 minutes\",\n                \"Rest for 30 minutes\",\n            ]\n            * 3,\n            period=\"10 seconds\",\n        )",
        "min_run_count": 2,
        "name": "benchmarks.LargePack.time_long_cycle_2cpu",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 600,
        "type": "time",
        "unit": "seconds",
        "version": "886173c7f314c25dcd319de5a644065b170ce4fe889082fb1ebcead737f35d99",
        "warmup_time": -1
    },
    "benchmarks.MediumPack.time_discharge_1cpu": {
        "code": "class MediumPack:\n    def time_discharge_1cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.experiment,\n            initial_soc=0.5,\n            nproc=1,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=32, Ns=10, Rb=1e-4, Rc=1e-2)\n        chemistry = pybamm.parameter_sets.Chen2020\n        self.parameter_values = pybamm.ParameterValues(chemistry=chemistry)\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 32 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )",
        "min_run_count": 2,
        "name": "benchmarks.MediumPack.time_discharge_1cpu",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 120,
        "type": "time",
        "unit": "seconds",
        "version": "b8aa492ab12a8aba37625a5c0deae1c109def02877ec79681d996a7f77cc595c",
        "warmup_time": -1
    },
    "benchmarks.MediumPack.time_discharge_2cpu": {
        "code": "class MediumPack:\n    def time_discharge_2cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.experiment,\n            initial_soc=0.5,\n            nproc=2,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=32, Ns=10, Rb=1e-4, Rc=1e-2)\n        chemistry = pybamm.parameter_sets.Chen2020\n        self.parameter_values = pybamm.ParameterValues(chemistry=chemistry)\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 32 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )",
        "min_run_count": 2,
        "name": "benchmarks.MediumPack.time_discharge_2cpu",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 120,
        "type": "time",
        "unit": "seconds",
        "version": "850ba37f55027bfd05992888284a51f0f34d93dcdd99053c957faf34e763a327",
        "warmup_time": -1
    },
    "benchmarks.SmallPack.time_discharge_1cpu": {
        "code": "class SmallPack:\n    def time_discharge_1cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.experiment,\n            initial_soc=0.5,\n            nproc=1,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=2, Ns=1, Rb=1e-4, Rc=1e-2)\n        chemistry = pybamm.parameter_sets.Chen2020\n        self.parameter_values = pybamm.ParameterValues(chemistry=chemistry)\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 2 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )",
        "min_run_count": 2,
        "name": "benchmarks.SmallPack.time_discharge_1cpu",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60,
        "type": "time",
        "unit": "seconds",
        "version": "07ba66cea19ff93b549ef21d8e3a0e9282b00d59822764eb1b4ac75f74a0d9c9",
        "warmup_time": -1
    },
    "benchmarks.SmallPack.time_discharge_2cpu": {
        "code": "class SmallPack:\n    def time_discharge_2cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.experiment,\n            initial_soc=0.5,\n            nproc=2,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=2, Ns=1, Rb=1e-4, Rc=1e-2)\n        chemistry = pybamm.parameter_sets.Chen2020\n        self.parameter_values = pybamm.ParameterValues(chemistry=chemistry)\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 2 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )",
        "min_run_count": 2,
        "name": "benchmarks.SmallPack.time_discharge_2cpu",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60,
        "type": "time",
        "unit": "seconds",
        "version": "7d2cd2d77443c50c3db4ed879be8a6cc5ece070ec744f5ce5778304a5f2f1f27",
        "warmup_time": -1
    },
    "version": 2
}