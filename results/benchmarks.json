{
    "benchmarks.BasicBenchmark.time_solve_model": {
        "code": "class BasicBenchmark:\n    def time_solve_model(self):\n        self.sim.solve([0, 1800])\n\n    def setup(self):\n        self.sim = lp.basic_simulation()",
        "min_run_count": 2,
        "name": "benchmarks.BasicBenchmark.time_solve_model",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "21dc88971553291c844a81300eeac2ae53f86ef7781bdb26086d1d57d88c8cec",
        "warmup_time": -1
    },
    "benchmarks.LargePack.time_discharge_1cpu": {
        "code": "class LargePack:\n    def time_discharge_1cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.experiment,\n            initial_soc=0.5,\n            nproc=1,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=64, Ns=10, Rb=1e-4, Rc=1e-2)\n        self.parameter_values = pybamm.ParameterValues(\"Chen2020\")\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 64 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )\n        I_app = 64\n        self.long_experiment = pybamm.Experiment(\n            [\n                f\"Charge at {I_app} A for 20 minutes\",\n                \"Rest for 15 minutes\",\n                f\"Discharge at {I_app} A for 20 minutes\",\n                \"Rest for 30 minutes\",\n            ]\n            * 3,\n            period=\"10 seconds\",\n        )",
        "min_run_count": 2,
        "name": "benchmarks.LargePack.time_discharge_1cpu",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 600,
        "type": "time",
        "unit": "seconds",
        "version": "4e674c106cfc4edfb9af4d8b507241633af8481d71030a6afcaacc7d7dac9ed1",
        "warmup_time": -1
    },
    "benchmarks.LargePack.time_discharge_2cpu": {
        "code": "class LargePack:\n    def time_discharge_2cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.experiment,\n            initial_soc=0.5,\n            nproc=2,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=64, Ns=10, Rb=1e-4, Rc=1e-2)\n        self.parameter_values = pybamm.ParameterValues(\"Chen2020\")\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 64 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )\n        I_app = 64\n        self.long_experiment = pybamm.Experiment(\n            [\n                f\"Charge at {I_app} A for 20 minutes\",\n                \"Rest for 15 minutes\",\n                f\"Discharge at {I_app} A for 20 minutes\",\n                \"Rest for 30 minutes\",\n            ]\n            * 3,\n            period=\"10 seconds\",\n        )",
        "min_run_count": 2,
        "name": "benchmarks.LargePack.time_discharge_2cpu",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 600,
        "type": "time",
        "unit": "seconds",
        "version": "5d0c4cd1e591d407e3023f9d5e68b566cf33622cc8ddf507e475de2cc791c2a0",
        "warmup_time": -1
    },
    "benchmarks.LargePack.time_long_cycle_2cpu": {
        "code": "class LargePack:\n    def time_long_cycle_2cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.long_experiment,\n            initial_soc=0.5,\n            nproc=2,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=64, Ns=10, Rb=1e-4, Rc=1e-2)\n        self.parameter_values = pybamm.ParameterValues(\"Chen2020\")\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 64 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )\n        I_app = 64\n        self.long_experiment = pybamm.Experiment(\n            [\n                f\"Charge at {I_app} A for 20 minutes\",\n                \"Rest for 15 minutes\",\n                f\"Discharge at {I_app} A for 20 minutes\",\n                \"Rest for 30 minutes\",\n            ]\n            * 3,\n            period=\"10 seconds\",\n        )",
        "min_run_count": 2,
        "name": "benchmarks.LargePack.time_long_cycle_2cpu",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 600,
        "type": "time",
        "unit": "seconds",
        "version": "1b5066ca752a464517f51c422ee3c5af277eecffe4e6e5c61c4373f8142e38b1",
        "warmup_time": -1
    },
    "benchmarks.MediumPack.time_discharge_1cpu": {
        "code": "class MediumPack:\n    def time_discharge_1cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.experiment,\n            initial_soc=0.5,\n            nproc=1,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=32, Ns=10, Rb=1e-4, Rc=1e-2)\n        self.parameter_values = pybamm.ParameterValues(\"Chen2020\")\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 32 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )",
        "min_run_count": 2,
        "name": "benchmarks.MediumPack.time_discharge_1cpu",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 120,
        "type": "time",
        "unit": "seconds",
        "version": "de29c1a0f782a88f2bd963acf36991bb6bac5ec83c08663ba0197efd0331330f",
        "warmup_time": -1
    },
    "benchmarks.MediumPack.time_discharge_2cpu": {
        "code": "class MediumPack:\n    def time_discharge_2cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.experiment,\n            initial_soc=0.5,\n            nproc=2,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=32, Ns=10, Rb=1e-4, Rc=1e-2)\n        self.parameter_values = pybamm.ParameterValues(\"Chen2020\")\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 32 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )",
        "min_run_count": 2,
        "name": "benchmarks.MediumPack.time_discharge_2cpu",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 120,
        "type": "time",
        "unit": "seconds",
        "version": "ca5f8ca52399e330f7eefe60a32fac53d43add789f1a2509e802c8fc50657f30",
        "warmup_time": -1
    },
    "benchmarks.SmallPack.time_discharge_1cpu": {
        "code": "class SmallPack:\n    def time_discharge_1cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.experiment,\n            initial_soc=0.5,\n            nproc=1,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=2, Ns=1, Rb=1e-4, Rc=1e-2)\n        self.parameter_values = pybamm.ParameterValues(\"Chen2020\")\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 2 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )",
        "min_run_count": 2,
        "name": "benchmarks.SmallPack.time_discharge_1cpu",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60,
        "type": "time",
        "unit": "seconds",
        "version": "0bec0662d02928ab7e468e64538ba8be92e71786f746556e2ba67cf2f9d73a4f",
        "warmup_time": -1
    },
    "benchmarks.SmallPack.time_discharge_2cpu": {
        "code": "class SmallPack:\n    def time_discharge_2cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.experiment,\n            initial_soc=0.5,\n            nproc=2,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=2, Ns=1, Rb=1e-4, Rc=1e-2)\n        self.parameter_values = pybamm.ParameterValues(\"Chen2020\")\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 2 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )",
        "min_run_count": 2,
        "name": "benchmarks.SmallPack.time_discharge_2cpu",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60,
        "type": "time",
        "unit": "seconds",
        "version": "33a8e36cf8ba3e95d90687972b706f401442f8d31ab7f0bfc4e1a46e5471a398",
        "warmup_time": -1
    },
    "version": 2
}