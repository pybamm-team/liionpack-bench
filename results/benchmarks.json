{
    "basic_benchmarks.BasicBenchmark.time_solve_model": {
        "code": "class BasicBenchmark:\n    def time_solve_model(self):\n        BasicBenchmark.sim.solve([0, 1800])\n\n    def setup(self):\n        self.sim = lp.basic_simulation()",
        "min_run_count": 2,
        "name": "basic_benchmarks.BasicBenchmark.time_solve_model",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "504d1f6b7a47e6a660b9f73cea8cc8755e90bab404fe1be253da58b7c159f516",
        "warmup_time": -1
    },
    "basic_benchmarks.LargePack.time_discharge_1cpu": {
        "code": "class LargePack:\n    def time_discharge_1cpu(self):\n        experiment = pybamm.Experiment(\n            [\n                \"Discharge at 64 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=experiment,\n            initial_soc=0.5,\n            nproc=1,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=64, Ns=64, Rb=1e-4, Rc=1e-2)\n        chemistry = pybamm.parameter_sets.Chen2020\n        self.parameter_values = pybamm.ParameterValues(chemistry=chemistry)",
        "min_run_count": 2,
        "name": "basic_benchmarks.LargePack.time_discharge_1cpu",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f3c41752a78e553a10027f99091a6c7868bbb9cab79f64c458e1828027e5c36f",
        "warmup_time": -1
    },
    "basic_benchmarks.LargePack.time_discharge_2cpu": {
        "code": "class LargePack:\n    def time_discharge_2cpu(self):\n        experiment = pybamm.Experiment(\n            [\n                \"Discharge at 64 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=experiment,\n            initial_soc=0.5,\n            nproc=2,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=64, Ns=64, Rb=1e-4, Rc=1e-2)\n        chemistry = pybamm.parameter_sets.Chen2020\n        self.parameter_values = pybamm.ParameterValues(chemistry=chemistry)",
        "min_run_count": 2,
        "name": "basic_benchmarks.LargePack.time_discharge_2cpu",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "037d50fea56607a6935651800e2ff9f0269cc084d5ac011f66f85382393ac9c9",
        "warmup_time": -1
    },
    "basic_benchmarks.LargePack.time_long_cycle_2cpu": {
        "code": "class LargePack:\n    def time_long_cycle_2cpu(self):\n        I_app = 64\n        experiment = pybamm.Experiment(\n            [\n                f\"Charge at {I_app} A for 20 minutes\",\n                \"Rest for 15 minutes\",\n                f\"Discharge at {I_app} A for 20 minutes\",\n                \"Rest for 30 minutes\",\n            ]\n            * 10,\n            period=\"10 seconds\",\n        )\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=experiment,\n            initial_soc=0.5,\n            nproc=2,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=64, Ns=64, Rb=1e-4, Rc=1e-2)\n        chemistry = pybamm.parameter_sets.Chen2020\n        self.parameter_values = pybamm.ParameterValues(chemistry=chemistry)",
        "min_run_count": 2,
        "name": "basic_benchmarks.LargePack.time_long_cycle_2cpu",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b01e3ade1db86867f2cd6769a78ee369d45d9f39ff9dce3e4c1d80a18796baaf",
        "warmup_time": -1
    },
    "basic_benchmarks.MediumPack.time_discharge_1cpu": {
        "code": "class MediumPack:\n    def time_discharge_1cpu(self):\n        experiment = pybamm.Experiment(\n            [\n                \"Discharge at 32 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=experiment,\n            initial_soc=0.5,\n            nproc=1,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=32, Ns=10, Rb=1e-4, Rc=1e-2)\n        chemistry = pybamm.parameter_sets.Chen2020\n        self.parameter_values = pybamm.ParameterValues(chemistry=chemistry)",
        "min_run_count": 2,
        "name": "basic_benchmarks.MediumPack.time_discharge_1cpu",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "dba4570cb5ee39ec4ed717647dd1ffe9576286d811caefee873f114b3cbf2df9",
        "warmup_time": -1
    },
    "basic_benchmarks.MediumPack.time_discharge_2cpu": {
        "code": "class MediumPack:\n    def time_discharge_2cpu(self):\n        experiment = pybamm.Experiment(\n            [\n                \"Discharge at 32 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=experiment,\n            initial_soc=0.5,\n            nproc=2,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=32, Ns=10, Rb=1e-4, Rc=1e-2)\n        chemistry = pybamm.parameter_sets.Chen2020\n        self.parameter_values = pybamm.ParameterValues(chemistry=chemistry)",
        "min_run_count": 2,
        "name": "basic_benchmarks.MediumPack.time_discharge_2cpu",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ac21f1bc2133031222024e9b339973be7cd91c466140c0555b87b9ccb2b42b56",
        "warmup_time": -1
    },
    "basic_benchmarks.SmallPack.time_discharge_1cpu": {
        "code": "class SmallPack:\n    def time_discharge_1cpu(self):\n        experiment = pybamm.Experiment(\n            [\n                \"Discharge at 2 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=experiment,\n            initial_soc=0.5,\n            nproc=1,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=2, Ns=1, Rb=1e-4, Rc=1e-2)\n        chemistry = pybamm.parameter_sets.Chen2020\n        self.parameter_values = pybamm.ParameterValues(chemistry=chemistry)",
        "min_run_count": 2,
        "name": "basic_benchmarks.SmallPack.time_discharge_1cpu",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9823f59045a18884750c1c965a9b2e3e4a3e9f3f9a6ad9a840e20842f63b12b8",
        "warmup_time": -1
    },
    "basic_benchmarks.SmallPack.time_discharge_2cpu": {
        "code": "class SmallPack:\n    def time_discharge_2cpu(self):\n        experiment = pybamm.Experiment(\n            [\n                \"Discharge at 2 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=experiment,\n            initial_soc=0.5,\n            nproc=2,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=2, Ns=1, Rb=1e-4, Rc=1e-2)\n        chemistry = pybamm.parameter_sets.Chen2020\n        self.parameter_values = pybamm.ParameterValues(chemistry=chemistry)",
        "min_run_count": 2,
        "name": "basic_benchmarks.SmallPack.time_discharge_2cpu",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d216b7644b6678700b4d910ff6b0d6b025b0a433c6aff8194ab71aea22d15c73",
        "warmup_time": -1
    },
    "benchmarks.MemSuite.mem_list": {
        "code": "class MemSuite:\n    def mem_list(self):\n        return [0] * 256",
        "name": "benchmarks.MemSuite.mem_list",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "memory",
        "unit": "bytes",
        "version": "abe86bab484550a681c61d7bb6eb081fbd37eb6d5009eba1df85c935530577b9"
    },
    "benchmarks.TimeSuite.time_iterkeys": {
        "code": "class TimeSuite:\n    def time_iterkeys(self):\n        for _ in self.d.iterkeys():\n            pass\n\n    def setup(self):\n        self.d = {}\n        for x in range(500):\n            self.d[x] = None",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_iterkeys",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "435552618e257984493fe7ec8599f14feace6164fd38fd5e52ba908e16460dc7",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_keys": {
        "code": "class TimeSuite:\n    def time_keys(self):\n        for _ in self.d.keys():\n            pass\n\n    def setup(self):\n        self.d = {}\n        for x in range(500):\n            self.d[x] = None",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_keys",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "a8700d8a3cfd71fbba4d1369e0ddffef01717c428b7bea4cc829c5a1a0243ac0",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_range": {
        "code": "class TimeSuite:\n    def time_range(self):\n        d = self.d\n        for key in range(500):\n            d[key]\n\n    def setup(self):\n        self.d = {}\n        for x in range(500):\n            self.d[x] = None",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_range",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "72a6802b5ba2270cc4af88ddbd67e3c44fe4f4c8b292257438a394167fbb158b",
        "warmup_time": -1
    },
    "version": 2
}