{"project": "liionpack", "project_url": "https://github.com/pybamm-team/liionpack", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"258": "f167c3a9e004e225822299d4b95c5383b14a64e2", "295": "7ae83ffeeac147518c2fa4fd79cd43a32e49e7cd", "349": "b713078418e48fdec31dcfedf3ea648197f00e72", "383": "72cbce06bc275e2a7c20d2eac6a3ed33040b054e", "407": "a2a67a4c6f7001f42a6836f60937630b084f853e", "432": "e08d6707d6ea755b604c65e67d5dfefede666be4", "489": "b174bbdd1b2fb4f30aa5730e60fb9975a15108ac", "504": "69caf9f82c7a523aa0e1594c392a118bb3975ac4", "529": "75c28c0775d3739a6fe58f911fcc40eeee28cdb4", "542": "5f2b468f344b27ea4844b3fe0a1c71de42a1167b", "546": "13effa54e1bfdec9c3761b1753ebb7fd480e26b1", "552": "9c3fcc1a3b7248853768a58b5a1de15892f1eb98", "554": "bbecdc3a2fea0aa623b6defbbeb2dc10708a8f34", "558": "5861013af13addf379a8d8135f18300f023ab485", "561": "a74fc7b95dbb5a2a2a2ada096d3b8ed354a60da3", "566": "b9b8791f53ad8635ce5fe7f1ad9ea09d484babc3", "569": "24f7231c29b1d5570c1ea4932905e128088b937d", "583": "a7d8b025ac44baed6eca4e3d5aaf810745fa6a4d", "596": "f8e924452ca7e1f67eda3f897a003528f333909d", "615": "24bc5a9828a8c49dcf41ef03b792e7c88014fc7b", "634": "306ef75e2f20bd86ff8541db065e7175ff1a8b1a", "639": "22b9118e02cdd05fa4c7465dc48c9559c27a3ad5", "656": "4ad9214d30ec8d9286f1d0f671be2980b0b96a98", "663": "85769f2eb7f03c6d9159a170184065ed88dfb271", "668": "b9b5518f37b4398347d1db4181bad3ded2589f30", "669": "d5b819f1f5e5f2a2c6ea564d4a14cab9eaf59b6e", "671": "16752506d2d81a3aec7260843a3104e8b0f4b550", "676": "70e4a5e0d0ea67bf0723c69ad68393fdeab9859a", "679": "56380e56c3ee5f7933c48ac57ac788c7d810ed48", "681": "00c1f26974ab8dee02c3e2027b38f9c1e9f87521", "684": "f239ccd113b1de0e4111316f5399c4be9eda7885", "690": "326b954169ba19a68acd2a8efae542c7f1458f0b", "696": "0593d350e163514e9da054e1d4b0004e1721acb3", "700": "a1c02b2b1bf54a0e751bdb9123c2c16b8fb5dd58", "705": "57b20281752f4f5b5a7074e225b336b4e2b32a16", "708": "b1a1ddbc6f607f24b3f916b8cc68f4a17980cf2e", "718": "2148e85e967de5b6753c0c440e5148c4b5a882bc", "724": "622ce9c8e4ef551e5e184896a85eb50cf059d2c9", "728": "37ebc63803469fc709747da0249bfce2aa74a75c", "744": "0eae90e40bc3bd55a8932ca048741c2929af73c2", "756": "f860f344b33b5f6d716b43c6d3f19dbe748047d7", "758": "9887ac55881fa6e53c01102e17ae26c744e61aab", "760": "3a1a98a5d40149782aa48df47250a6254a496d41", "762": "aac9128fe6a92dfaaa28a0ecb72aaa093d67369b", "766": "b85e37690049d949841dc0aa74a1fe6e54d25f75", "769": "4e4e13e31c50bcaa6b25e882f6bfb16e1a58b0af", "803": "cb38ed5113452d82ac4a63ec3ef34e62f61ad8ed"}, "revision_to_date": {"258": 1637346758000, "295": 1637573055000, "349": 1637785933000, "383": 1638206528000, "407": 1638528548000, "432": 1638815530000, "489": 1639474358000, "504": 1639503985000, "529": 1643133728000, "542": 1643990225000, "546": 1644487077000, "552": 1645108005000, "554": 1645108811000, "558": 1645456396000, "561": 1645466089000, "566": 1646386028000, "569": 1649694090000, "583": 1652955142000, "596": 1653384349000, "615": 1654785813000, "634": 1656677589000, "639": 1659107872000, "656": 1659440176000, "663": 1659604473000, "668": 1661866310000, "669": 1662024598000, "671": 1662136396000, "676": 1663837039000, "679": 1663952155000, "681": 1664471973000, "684": 1665588578000, "690": 1670936917000, "696": 1672934245000, "700": 1672940316000, "705": 1673547525000, "708": 1674115751000, "718": 1677775398000, "724": 1677837755000, "728": 1677848672000, "744": 1680281232000, "756": 1680715676000, "758": 1680773475000, "760": 1680777563000, "762": 1684943240000, "766": 1685121791000, "769": 1686149746000, "803": 1688563002000}, "params": {"machine": ["GitHubRunner"], "python": ["3.8"], "branch": ["main"]}, "graph_param_list": [{"machine": "GitHubRunner", "python": "3.8", "branch": "main"}], "benchmarks": {"benchmarks.BasicBenchmark.time_solve_model": {"code": "class BasicBenchmark:\n    def time_solve_model(self):\n        self.sim.solve([0, 1800])\n\n    def setup(self):\n        self.sim = lp.basic_simulation()", "min_run_count": 2, "name": "benchmarks.BasicBenchmark.time_solve_model", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "21dc88971553291c844a81300eeac2ae53f86ef7781bdb26086d1d57d88c8cec", "warmup_time": -1}, "benchmarks.LargePack.time_discharge_1cpu": {"code": "class LargePack:\n    def time_discharge_1cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.experiment,\n            initial_soc=0.5,\n            nproc=1,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=64, Ns=10, Rb=1e-4, Rc=1e-2)\n        self.parameter_values = pybamm.ParameterValues(\"Chen2020\")\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 64 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )\n        I_app = 64\n        self.long_experiment = pybamm.Experiment(\n            [\n                f\"Charge at {I_app} A for 20 minutes\",\n                \"Rest for 15 minutes\",\n                f\"Discharge at {I_app} A for 20 minutes\",\n                \"Rest for 30 minutes\",\n            ]\n            * 3,\n            period=\"10 seconds\",\n        )", "min_run_count": 2, "name": "benchmarks.LargePack.time_discharge_1cpu", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "4e674c106cfc4edfb9af4d8b507241633af8481d71030a6afcaacc7d7dac9ed1", "warmup_time": -1}, "benchmarks.LargePack.time_discharge_2cpu": {"code": "class LargePack:\n    def time_discharge_2cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.experiment,\n            initial_soc=0.5,\n            nproc=2,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=64, Ns=10, Rb=1e-4, Rc=1e-2)\n        self.parameter_values = pybamm.ParameterValues(\"Chen2020\")\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 64 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )\n        I_app = 64\n        self.long_experiment = pybamm.Experiment(\n            [\n                f\"Charge at {I_app} A for 20 minutes\",\n                \"Rest for 15 minutes\",\n                f\"Discharge at {I_app} A for 20 minutes\",\n                \"Rest for 30 minutes\",\n            ]\n            * 3,\n            period=\"10 seconds\",\n        )", "min_run_count": 2, "name": "benchmarks.LargePack.time_discharge_2cpu", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "5d0c4cd1e591d407e3023f9d5e68b566cf33622cc8ddf507e475de2cc791c2a0", "warmup_time": -1}, "benchmarks.LargePack.time_long_cycle_2cpu": {"code": "class LargePack:\n    def time_long_cycle_2cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.long_experiment,\n            initial_soc=0.5,\n            nproc=2,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=64, Ns=10, Rb=1e-4, Rc=1e-2)\n        self.parameter_values = pybamm.ParameterValues(\"Chen2020\")\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 64 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )\n        I_app = 64\n        self.long_experiment = pybamm.Experiment(\n            [\n                f\"Charge at {I_app} A for 20 minutes\",\n                \"Rest for 15 minutes\",\n                f\"Discharge at {I_app} A for 20 minutes\",\n                \"Rest for 30 minutes\",\n            ]\n            * 3,\n            period=\"10 seconds\",\n        )", "min_run_count": 2, "name": "benchmarks.LargePack.time_long_cycle_2cpu", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "1b5066ca752a464517f51c422ee3c5af277eecffe4e6e5c61c4373f8142e38b1", "warmup_time": -1}, "benchmarks.MediumPack.time_discharge_1cpu": {"code": "class MediumPack:\n    def time_discharge_1cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.experiment,\n            initial_soc=0.5,\n            nproc=1,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=32, Ns=10, Rb=1e-4, Rc=1e-2)\n        self.parameter_values = pybamm.ParameterValues(\"Chen2020\")\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 32 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )", "min_run_count": 2, "name": "benchmarks.MediumPack.time_discharge_1cpu", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 120, "type": "time", "unit": "seconds", "version": "de29c1a0f782a88f2bd963acf36991bb6bac5ec83c08663ba0197efd0331330f", "warmup_time": -1}, "benchmarks.MediumPack.time_discharge_2cpu": {"code": "class MediumPack:\n    def time_discharge_2cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.experiment,\n            initial_soc=0.5,\n            nproc=2,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=32, Ns=10, Rb=1e-4, Rc=1e-2)\n        self.parameter_values = pybamm.ParameterValues(\"Chen2020\")\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 32 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )", "min_run_count": 2, "name": "benchmarks.MediumPack.time_discharge_2cpu", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 120, "type": "time", "unit": "seconds", "version": "ca5f8ca52399e330f7eefe60a32fac53d43add789f1a2509e802c8fc50657f30", "warmup_time": -1}, "benchmarks.SmallPack.time_discharge_1cpu": {"code": "class SmallPack:\n    def time_discharge_1cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.experiment,\n            initial_soc=0.5,\n            nproc=1,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=2, Ns=1, Rb=1e-4, Rc=1e-2)\n        self.parameter_values = pybamm.ParameterValues(\"Chen2020\")\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 2 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )", "min_run_count": 2, "name": "benchmarks.SmallPack.time_discharge_1cpu", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60, "type": "time", "unit": "seconds", "version": "0bec0662d02928ab7e468e64538ba8be92e71786f746556e2ba67cf2f9d73a4f", "warmup_time": -1}, "benchmarks.SmallPack.time_discharge_2cpu": {"code": "class SmallPack:\n    def time_discharge_2cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.experiment,\n            initial_soc=0.5,\n            nproc=2,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=2, Ns=1, Rb=1e-4, Rc=1e-2)\n        self.parameter_values = pybamm.ParameterValues(\"Chen2020\")\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 2 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )", "min_run_count": 2, "name": "benchmarks.SmallPack.time_discharge_2cpu", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60, "type": "time", "unit": "seconds", "version": "33a8e36cf8ba3e95d90687972b706f401442f8d31ab7f0bfc4e1a46e5471a398", "warmup_time": -1}}, "machines": {"GitHubRunner": {"machine": "GitHubRunner", "version": 1}}, "tags": {"v.0.3.4": 724, "v0.1.0-beta": 407, "v0.2-beta": 432, "v0.2.1-beta": 489, "v0.2.2-beta": 504, "v0.3": 552, "v0.3.1": 596, "v0.3.2": 634, "v0.3.3": 696, "v0.3.5": 758, "v0.3.6": 766, "v0.3.7": 803}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}