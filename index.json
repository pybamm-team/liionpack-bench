{"project": "liionpack", "project_url": "https://github.com/pybamm-team/liionpack", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"204": "4c3f61b6f28e1419974c8572669d70fc173a6959", "208": "94d627eb52b86b899f5e05ebf0931069f1a91b58", "228": "a67956a47698ea137aa31dc529be2acf1034383b", "254": "0e3b45069a67a1bedb4ffbcfe423b1c3ab746503", "262": "db6cf95b9390e7852bc9abe3de0e70cb4d04143c", "275": "85de550956f96bf422dc5273cf96daa4d0a1bdb5", "291": "b03d72065c443cbf6c76ab75583fdc0df417368d", "295": "7ae83ffeeac147518c2fa4fd79cd43a32e49e7cd", "324": "8c9725752a6a284bf2114d532df4828b0ab0df17", "346": "1a098e2ff43b27789dc7131592d3b8da1bd90578", "356": "f524203bd9d3e839bb4964d81068933e8ae4dd8c", "361": "1e40870d4fb06567598a2748074384cbdbbb3892", "367": "e07960520e9b390c75fc7b97c9f03af2c589a26f", "383": "72cbce06bc275e2a7c20d2eac6a3ed33040b054e", "393": "2998302ef69140d90008e7445d26dc8f5a258888", "404": "cf9c8e87901996287f312a2afd3fca437354f3e6", "405": "51f25883b73b0e3f9d577cc57eddc41b86f4b088", "407": "a2a67a4c6f7001f42a6836f60937630b084f853e", "430": "e8c58decde526f66863f9919c7e71af25155e17d", "432": "e08d6707d6ea755b604c65e67d5dfefede666be4", "438": "b4b6c2d1b4d408e931aa9a615ff939202997af07", "475": "7ff5f38584375e55c55c97f7565a236307b0a592", "485": "14325d1696261a65fca9497904c634c51f60fb3f", "489": "b174bbdd1b2fb4f30aa5730e60fb9975a15108ac", "504": "69caf9f82c7a523aa0e1594c392a118bb3975ac4"}, "revision_to_date": {"204": 1636535332000, "208": 1636564237000, "228": 1637076476000, "254": 1637341687000, "262": 1637348221000, "275": 1637431684000, "291": 1637485705000, "295": 1637573055000, "324": 1637706982000, "346": 1637783868000, "356": 1637793847000, "361": 1637825585000, "367": 1637845927000, "383": 1638206528000, "393": 1638364215000, "404": 1638452624000, "405": 1638452722000, "407": 1638528548000, "430": 1638801501000, "432": 1638815530000, "438": 1638892052000, "475": 1639304800000, "485": 1639411095000, "489": 1639474358000, "504": 1639503985000}, "params": {"machine": ["GitHubRunner"], "python": ["3.8"], "branch": ["main"]}, "graph_param_list": [{"machine": "GitHubRunner", "python": "3.8", "branch": "main"}], "benchmarks": {"benchmarks.BasicBenchmark.time_solve_model": {"code": "class BasicBenchmark:\n    def time_solve_model(self):\n        self.sim.solve([0, 1800])\n\n    def setup(self):\n        self.sim = lp.basic_simulation()", "min_run_count": 2, "name": "benchmarks.BasicBenchmark.time_solve_model", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "21dc88971553291c844a81300eeac2ae53f86ef7781bdb26086d1d57d88c8cec", "warmup_time": -1}, "benchmarks.LargePack.time_discharge_1cpu": {"code": "class LargePack:\n    def time_discharge_1cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.experiment,\n            initial_soc=0.5,\n            nproc=1,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=64, Ns=10, Rb=1e-4, Rc=1e-2)\n        chemistry = pybamm.parameter_sets.Chen2020\n        self.parameter_values = pybamm.ParameterValues(chemistry=chemistry)\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 64 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )\n        I_app = 64\n        self.long_experiment = pybamm.Experiment(\n            [\n                f\"Charge at {I_app} A for 20 minutes\",\n                \"Rest for 15 minutes\",\n                f\"Discharge at {I_app} A for 20 minutes\",\n                \"Rest for 30 minutes\",\n            ]\n            * 3,\n            period=\"10 seconds\",\n        )", "min_run_count": 2, "name": "benchmarks.LargePack.time_discharge_1cpu", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "5a2756f3bebd1d0e37e074eb74a0bca10c9ce960ed21316ad26e9583a10353f8", "warmup_time": -1}, "benchmarks.LargePack.time_discharge_2cpu": {"code": "class LargePack:\n    def time_discharge_2cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.experiment,\n            initial_soc=0.5,\n            nproc=2,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=64, Ns=10, Rb=1e-4, Rc=1e-2)\n        chemistry = pybamm.parameter_sets.Chen2020\n        self.parameter_values = pybamm.ParameterValues(chemistry=chemistry)\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 64 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )\n        I_app = 64\n        self.long_experiment = pybamm.Experiment(\n            [\n                f\"Charge at {I_app} A for 20 minutes\",\n                \"Rest for 15 minutes\",\n                f\"Discharge at {I_app} A for 20 minutes\",\n                \"Rest for 30 minutes\",\n            ]\n            * 3,\n            period=\"10 seconds\",\n        )", "min_run_count": 2, "name": "benchmarks.LargePack.time_discharge_2cpu", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "f19047f1071beb2e16eb288e9a2cb14f4b91fca1dd10a3dbe5c68078a908886d", "warmup_time": -1}, "benchmarks.LargePack.time_long_cycle_2cpu": {"code": "class LargePack:\n    def time_long_cycle_2cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.long_experiment,\n            initial_soc=0.5,\n            nproc=2,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=64, Ns=10, Rb=1e-4, Rc=1e-2)\n        chemistry = pybamm.parameter_sets.Chen2020\n        self.parameter_values = pybamm.ParameterValues(chemistry=chemistry)\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 64 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )\n        I_app = 64\n        self.long_experiment = pybamm.Experiment(\n            [\n                f\"Charge at {I_app} A for 20 minutes\",\n                \"Rest for 15 minutes\",\n                f\"Discharge at {I_app} A for 20 minutes\",\n                \"Rest for 30 minutes\",\n            ]\n            * 3,\n            period=\"10 seconds\",\n        )", "min_run_count": 2, "name": "benchmarks.LargePack.time_long_cycle_2cpu", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "886173c7f314c25dcd319de5a644065b170ce4fe889082fb1ebcead737f35d99", "warmup_time": -1}, "benchmarks.MediumPack.time_discharge_1cpu": {"code": "class MediumPack:\n    def time_discharge_1cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.experiment,\n            initial_soc=0.5,\n            nproc=1,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=32, Ns=10, Rb=1e-4, Rc=1e-2)\n        chemistry = pybamm.parameter_sets.Chen2020\n        self.parameter_values = pybamm.ParameterValues(chemistry=chemistry)\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 32 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )", "min_run_count": 2, "name": "benchmarks.MediumPack.time_discharge_1cpu", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120, "type": "time", "unit": "seconds", "version": "b8aa492ab12a8aba37625a5c0deae1c109def02877ec79681d996a7f77cc595c", "warmup_time": -1}, "benchmarks.MediumPack.time_discharge_2cpu": {"code": "class MediumPack:\n    def time_discharge_2cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.experiment,\n            initial_soc=0.5,\n            nproc=2,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=32, Ns=10, Rb=1e-4, Rc=1e-2)\n        chemistry = pybamm.parameter_sets.Chen2020\n        self.parameter_values = pybamm.ParameterValues(chemistry=chemistry)\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 32 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )", "min_run_count": 2, "name": "benchmarks.MediumPack.time_discharge_2cpu", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120, "type": "time", "unit": "seconds", "version": "850ba37f55027bfd05992888284a51f0f34d93dcdd99053c957faf34e763a327", "warmup_time": -1}, "benchmarks.SmallPack.time_discharge_1cpu": {"code": "class SmallPack:\n    def time_discharge_1cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.experiment,\n            initial_soc=0.5,\n            nproc=1,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=2, Ns=1, Rb=1e-4, Rc=1e-2)\n        chemistry = pybamm.parameter_sets.Chen2020\n        self.parameter_values = pybamm.ParameterValues(chemistry=chemistry)\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 2 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )", "min_run_count": 2, "name": "benchmarks.SmallPack.time_discharge_1cpu", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60, "type": "time", "unit": "seconds", "version": "07ba66cea19ff93b549ef21d8e3a0e9282b00d59822764eb1b4ac75f74a0d9c9", "warmup_time": -1}, "benchmarks.SmallPack.time_discharge_2cpu": {"code": "class SmallPack:\n    def time_discharge_2cpu(self):\n        _ = lp.solve(\n            netlist=self.netlist.copy(),\n            parameter_values=self.parameter_values.copy(),\n            experiment=self.experiment,\n            initial_soc=0.5,\n            nproc=2,\n        )\n\n    def setup(self):\n        self.netlist = lp.setup_circuit(Np=2, Ns=1, Rb=1e-4, Rc=1e-2)\n        chemistry = pybamm.parameter_sets.Chen2020\n        self.parameter_values = pybamm.ParameterValues(chemistry=chemistry)\n        self.experiment = pybamm.Experiment(\n            [\n                \"Discharge at 2 A for 5 minutes\",\n            ],\n            period=\"10 seconds\",\n        )", "min_run_count": 2, "name": "benchmarks.SmallPack.time_discharge_2cpu", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60, "type": "time", "unit": "seconds", "version": "7d2cd2d77443c50c3db4ed879be8a6cc5ece070ec744f5ce5778304a5f2f1f27", "warmup_time": -1}}, "machines": {"GitHubRunner": {"machine": "GitHubRunner", "version": 1}}, "tags": {"v0.1.0-beta": 407, "v0.2-beta": 432, "v0.2.1-beta": 489, "v0.2.2-beta": 504}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}